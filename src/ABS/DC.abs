module ABS.DC;

export *;

data Resourcetype = Speed     // Execution speed in "cpu units" - used by [Cost: x] annotation
                  | Cores     // Number of cores (static declaration for deployment planning)
                  | Bandwidth // Transmit speed in "data units" - used by [DataSize: x] annotation
                  | Memory    // Memory size (static declaration for deployment planning)
                  | Startupduration            // Time to start, used by CloudProvider
                  | Shutdownduration           // Time to shut down, used by CloudProvider
                  | PaymentInterval            // Billing period, used by CloudProvider
                  | CostPerInterval            // Cost per billing period, used by CloudProvider
                  ;

interface DC {
    // Return the load (0-100) for given resourcetype over the last n periods.
    // If resource is infinite, return 0.
    Rat load(Resourcetype rtype, Int periods);
    // Return the total available amount for given resourcetype.
    Rat total(Resourcetype rtype);

    // for sim purposes, hidden
    Unit request__(Int nrInstr);
}

class SimDC(Int instrPS) implements DC {
  // TODO
  Rat load(Resourcetype rtype, Int periods) { 
    return 0; 
  }
  // TODO
  Rat total(Resourcetype rtype) {
    return 0;
  }
  Unit request__(Int nrInstr) {
    println(toString(nrInstr));
    if (nrInstr > instrPS) {
      duration(1,1);
      suspend;
      return this.request__(nrInstr-instrPS); // tail-recursive
    }
    else {
      Rat remaining = nrInstr/instrPS;
      duration(remaining,remaining);
    }
  }
}

{
  DC o = new SimDC(3);
  Fut<Unit> f1 =o!request__(10);
  Fut<Unit> f2 = o!request__(19);
  await f1? & f2?;
}